---
controls:
version: 1.5
id: 1
text: "Master Node Security Configuration"
type: "master"
groups:
  - id: 1.1
    text: "Master Node Configuration Files "
    checks:
      - id: 1.1.1
        type: "skip"
        text: "Ensure that the API server pod specification file permissions are set to `644` or more restrictive (Scored)"
        audit: "/bin/sh -c 'if test -e $apiserverconf; then stat -c %a $apiserverconf; fi'"
        tests:
          bin_op: or
          test_items:
            - flag: "644"
              compare:
                op: eq
                value: "644"
              set: true
            - flag: "640"
              compare:
                op: eq
                value: "640"
              set: true
            - flag: "600"
              compare:
                op: eq
                value: "600"
              set: true
        remediation: |
          RKE doesn’t require or maintain a configuration file for the API server. All configuration is passed in as arguments at container run time.
        scored: true

      - id: 1.1.2
        type: "skip"
        text: "Ensure that the API server pod specification file ownership is set to `root:root` (Scored)"
        audit: "/bin/sh -c 'if test -e $apiserverconf; then stat -c %U:%G $apiserverconf; fi'"
        tests:
          test_items:
            - flag: "root:root"
              compare:
                op: eq
                value: "root:root"
              set: true
        remediation: |
          RKE doesn’t require or maintain a configuration file for the  API server. All configuration is passed in as arguments at container run time.
        scored: true

      - id: 1.1.3
        type: "skip"
        text: "Ensure that the controller manager pod specification file permissions are set to `644` or more restrictive (Scored)"
        audit: "/bin/sh -c 'if test -e $controllermanagerconf; then stat -c %a $controllermanagerconf; fi'"
        tests:
          bin_op: or
          test_items:
            - flag: "644"
              compare:
                op: eq
                value: "644"
              set: true
            - flag: "640"
              compare:
                op: eq
                value: "640"
              set: true
            - flag: "600"
              compare:
                op: eq
                value: "600"
              set: true
        remediation: |
          RKE doesn’t require or maintain a configuration file for the controller manager. All configuration is passed in as arguments at container run time.
        scored: true

      - id: 1.1.4
        type: "skip"
        text: "Ensure that the controller manager pod specification file ownership is set to `root:root` (Scored)"
        audit: "/bin/sh -c 'if test -e $controllermanagerconf; then stat -c %U:%G $controllermanagerconf; fi'"
        tests:
          test_items:
            - flag: "root:root"
              compare:
                op: eq
                value: "root:root"
              set: true
        remediation: |
          RKE doesn’t require or maintain a configuration file for the controller manager. All configuration is passed in as arguments at container run time.
        scored: true

      - id: 1.1.5
        type: "skip"
        text: "Ensure that the scheduler pod specification file permissions are set to `644` or more restrictive (Scored)"
        audit: "/bin/sh -c 'if test -e $schedulerconf; then stat -c %a $schedulerconf; fi'"
        tests:
          bin_op: or
          test_items:
            - flag: "644"
              compare:
                op: eq
                value: "644"
              set: true
            - flag: "640"
              compare:
                op: eq
                value: "640"
              set: true
            - flag: "600"
              compare:
                op: eq
                value: "600"
              set: true
        remediation: |
          RKE doesn’t require or maintain a configuration file for the scheduler. All configuration is passed in as arguments at container run time.
        scored: true

      - id: 1.1.6
        type: "skip"
        text: "Ensure that the scheduler pod specification file ownership is set to `root:root` (Scored)"
        audit: "/bin/sh -c 'if test -e $schedulerconf; then stat -c %U:%G $schedulerconf; fi'"
        tests:
          test_items:
            - flag: "root:root"
              compare:
                op: eq
                value: "root:root"
              set: true
        remediation: |
          RKE doesn’t require or maintain a configuration file for the scheduler. All configuration is passed in as arguments at container run time.
        scored: true

      - id: 1.1.7
        type: "skip"
        text: "Ensure that the etcd pod specification file permissions are set to `644` or more restrictive (Scored)"
        audit: "/bin/sh -c 'if test -e $etcdconf; then stat -c %a $etcdconf; fi'"
        tests:
          bin_op: or
          test_items:
            - flag: "644"
              compare:
                op: eq
                value: "644"
              set: true
            - flag: "640"
              compare:
                op: eq
                value: "640"
              set: true
            - flag: "600"
              compare:
                op: eq
                value: "600"
              set: true
        remediation: |
          RKE doesn’t require or maintain a configuration file for etcd. All configuration is passed in as arguments at container run time.
        scored: true

      - id: 1.1.8
        type: "skip"
        text: "Ensure that the etcd pod specification file ownership is set to `root:root` (Scored)"
        audit: "/bin/sh -c 'if test -e $etcdconf; then stat -c %U:%G $etcdconf; fi'"
        tests:
          test_items:
            - flag: "root:root"
              compare:
                op: eq
                value: "root:root"
              set: true
        remediation: |
          RKE doesn’t require or maintain a configuration file for etcd. All configuration is passed in as arguments at container run time.
        scored: true

      - id: 1.1.9
        text: "Ensure that the Container Network Interface file permissions are set to `644` or more restrictive (Not Scored)"
        audit: "/mnt/kube-bench/test_helpers/1.1.9.sh /etc/cni/net.d"
        tests:
          test_items:
            - flag: "pass"
              set: true
        remediation: |
          Run the below command (based on the file location on your system) on the master node.
          For example,

          ``` bash
          chmod 644 <path/to/cni/files>
          ```

        scored: false

      - id: 1.1.10
        text: "Ensure that the Container Network Interface file ownership is set to `root:root` (Not Scored)"
        audit: "stat -c %U:%G /etc/cni/net.d"
        tests:
          test_items:
            - flag: "root:root"
              set: true
        remediation: |
          Run the below command (based on the file location on your system) on the master node.
          For example,

          ``` bash
          chown root:root <path/to/cni/files>
          ```
        
        scored: false

      - id: 1.1.11
        text: "Ensure that the etcd data directory permissions are set to `700` or more restrictive (Scored)"
        audit: "/mnt/kube-bench/test_helpers/1.1.11.sh $etcdbin"
        tests:
          test_items:
            - flag: "700"
              compare:
                op: eq
                value: "700"
              set: true
        remediation: |
          On the etcd server node, get the etcd data directory, passed as an argument `--data-dir`,
          from the below command:

          ``` bash
          ps -ef | grep etcd
          ```
 
          Run the below command (based on the etcd data directory found above). For example,

          ``` bash
          chmod 700 /var/lib/etcd
          ```

        scored: true

      - id: 1.1.12
        text: "Ensure that the etcd data directory ownership is set to `etcd:etcd` (Scored)"
        audit: "/mnt/kube-bench/test_helpers/1.1.12.sh $etcdbin"
        tests:
          test_items:
            - flag: "etcd:etcd"
              set: true
        remediation: |
          On the etcd server node, get the etcd data directory, passed as an argument `--data-dir`,
          from the below command:

          ``` bash
          ps -ef | grep etcd
          ```

          Run the below command (based on the etcd data directory found above).
          For example,
          ``` bash
          chown etcd:etcd /var/lib/etcd
          ```  
        scored: true

      - id: 1.1.13
        type: "skip"
        text: "Ensure that the `admin.conf` file permissions are set to `644` or more restrictive (Scored)"
        audit: "/bin/sh -c 'if test -e /etc/kubernetes/admin.conf; then stat -c %a /etc/kubernetes/admin.conf; fi'"
        tests:
          bin_op: or
          test_items:
            - flag: "644"
              compare:
                op: eq
                value: "644"
              set: true
            - flag: "640"
              compare:
                op: eq
                value: "640"
              set: true
            - flag: "600"
              compare:
                op: eq
                value: "600"
              set: true
        remediation: |
          RKE does not store the kubernetes default kubeconfig credentials file on the nodes. It’s presented to user where RKE is run.
          We recommend that this `kube_config_cluster.yml` file be kept in secure store.
        scored: true

      - id: 1.1.14
        type: "skip"
        text: "Ensure that the admin.conf file ownership is set to `root:root` (Scored) "
        audit: "/bin/sh -c 'if test -e /etc/kubernetes/admin.conf; then stat -c %U:%G /etc/kubernetes/admin.conf; fi'"
        tests:
          test_items:
            - flag: "root:root"
              compare:
                op: eq
                value: "root:root"
              set: true
        remediation: |
          RKE does not store the kubernetes default kubeconfig credentials file on the nodes. It’s presented to user where RKE is run.
          We recommend that this `kube_config_cluster.yml` file be kept in secure store.
        scored: true

      - id: 1.1.15
        type: "skip"
        text: "Ensure that the `scheduler.conf` file permissions are set to `644` or more restrictive (Scored)"
        audit: "/bin/sh -c 'if test -e /etc/kubernetes/scheduler.conf; then stat -c %a /etc/kubernetes/scheduler.conf; fi'"
        tests:
          bin_op: or
          test_items:
            - flag: "644"
              compare:
                op: eq
                value: "644"
              set: true
            - flag: "640"
              compare:
                op: eq
                value: "640"
              set: true
            - flag: "600"
              compare:
                op: eq
                value: "600"
              set: true
        remediation: |
          RKE doesn’t require or maintain a configuration file for the scheduler. All configuration is passed in as arguments at container run time.
        scored: true

      - id: 1.1.16
        type: "skip"
        text: "Ensure that the `scheduler.conf` file ownership is set to `root:root` (Scored)"
        audit: "/bin/sh -c 'if test -e /etc/kubernetes/scheduler.conf; then stat -c %U:%G /etc/kubernetes/scheduler.conf; fi'"
        tests:
          test_items:
            - flag: "root:root"
              compare:
                op: eq
                value: "root:root"
              set: true
        remediation: |
          RKE doesn’t require or maintain a configuration file for the scheduler. All configuration is passed in as arguments at container run time.
        scored: true

      - id: 1.1.17
        type: "skip"
        text: "Ensure that the `controller-manager.conf` file permissions are set to `644` or more restrictive (Scored)"
        audit: "/bin/sh -c 'if test -e /etc/kubernetes/controller-manager.conf; then stat -c %a /etc/kubernetes/controller-manager.conf; fi'"
        tests:
          bin_op: or
          test_items:
            - flag: "644"
              compare:
                op: eq
                value: "644"
              set: true
            - flag: "640"
              compare:
                op: eq
                value: "640"
              set: true
            - flag: "600"
              compare:
                op: eq
                value: "600"
              set: true
        remediation: |
          RKE doesn’t require or maintain a configuration file for the controller manager. All configuration is passed in as arguments at container run time.
        scored: true

      - id: 1.1.18
        type: "skip"
        text: "Ensure that the `controller-manager.conf` file ownership is set to `root:root` (Scored)"
        audit: "/bin/sh -c 'if test -e /etc/kubernetes/controller-manager.conf; then stat -c %U:%G /etc/kubernetes/controller-manager.conf; fi'"
        tests:
          test_items:
            - flag: "root:root"
              compare:
                op: eq
                value: "root:root"
              set: true
        remediation: |
          RKE doesn’t require or maintain a configuration file for the controller manager. All configuration is passed in as arguments at container run time.
        scored: true

      - id: 1.1.19
        text: "Ensure that the Kubernetes PKI directory and file ownership is set to `root:root` (Scored)"
        audit: "stat -c %U:%G /etc/kubernetes/ssl"
        tests:
          test_items:
            - flag: "root:root"
              set: true
        remediation: |
          Run the below command (based on the file location on your system) on the master node.
          For example,

          ``` bash
          chown -R root:root /etc/kubernetes/ssl
          ```
        scored: true

      - id: 1.1.20
        text: "Ensure that the Kubernetes PKI certificate file permissions are set to `644` or more restrictive (Scored) "
        audit: "/mnt/kube-bench/test_helpers/check_files_permissions.sh '/etc/kubernetes/ssl/*.pem'"
        tests:
          test_items:
            - flag: "true"
              set: true
        remediation: |
          Run the below command (based on the file location on your system) on the master node.
          For example,

          ``` bash
          chmod -R 644 /etc/kubernetes/ssl"
          ```

        scored: true

      - id: 1.1.21
        text: "Ensure that the Kubernetes PKI key file permissions are set to `600` (Scored)"
        audit: "/mnt/kube-bench/test_helpers/1.1.21.sh /etc/kubernetes/ssl"
        tests:
          test_items:
            - flag: "pass"
              set: true
        remediation: |
          Run the below command (based on the file location on your system) on the master node.
          For example,
    
          ``` bash
          chmod -R 600 /etc/kubernetes/ssl/certs/serverca
          ```

        scored: true

  - id: 1.2
    text: "API Server"
    checks:
      - id: 1.2.1
        text: "Ensure that the `--anonymous-auth` argument is set to `false` (Not Scored)"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--anonymous-auth"
              compare:
                op: eq
                value: false
              set: true
        remediation: |
          Edit the API server pod specification file `$apiserverconf`
          on the master node and set the below parameter.

          ``` bash
          --anonymous-auth=false
          ```

        scored: false

      - id: 1.2.2
        text: "Ensure that the `--basic-auth-file` argument is not set (Scored)"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--basic-auth-file"
              set: false
        remediation: |
          Follow the documentation and configure alternate mechanisms for authentication. Then,
          edit the API server pod specification file `$apiserverconf`
          on the master node and remove the `--basic-auth-file=<filename>` parameter.
        scored: true

      - id: 1.2.3
        text: "Ensure that the `--token-auth-file` parameter is not set (Scored)"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--token-auth-file"
              set: false
        remediation: |
          Follow the documentation and configure alternate mechanisms for authentication. Then,
          edit the API server pod specification file `$apiserverconf`
          on the master node and remove the `--token-auth-file=<filename>` parameter.
        scored: true

      - id: 1.2.4
        text: "Ensure that the `--kubelet-https` argument is set to true (Scored)"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          bin_op: or
          test_items:
            - flag: "--kubelet-https"
              compare:
                op: eq
                value: true
              set: true
            - flag: "--kubelet-https"
              set: false
        remediation: |
          Edit the API server pod specification file $apiserverconf
          on the master node and remove the `--kubelet-https` parameter.
        scored: true

      - id: 1.2.5
        text: "Ensure that the `--kubelet-client-certificate` and `--kubelet-client-key` arguments are set as appropriate (Scored)"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          bin_op: and
          test_items:
            - flag: "--kubelet-client-certificate"
              set: true
            - flag: "--kubelet-client-key"
              set: true
        remediation: |
          Follow the Kubernetes documentation and set up the TLS connection between the
          apiserver and kubelets. Then, edit API server pod specification file
          `$apiserverconf` on the master node and set the
          kubelet client certificate and key parameters as below.

          ``` bash
          --kubelet-client-certificate=<path/to/client-certificate-file>
          --kubelet-client-key=<path/to/client-key-file>
          ```

        scored: true

      - id: 1.2.6
        text: "Ensure that the `--kubelet-certificate-authority` argument is set as appropriate (Scored)"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--kubelet-certificate-authority"
              set: true
        remediation: |
          Follow the Kubernetes documentation and setup the TLS connection between
          the apiserver and kubelets. Then, edit the API server pod specification file
          `$apiserverconf` on the master node and set the
          `--kubelet-certificate-authority` parameter to the path to the cert file for the certificate authority.
          `--kubelet-certificate-authority=<ca-string>`
        scored: true

      - id: 1.2.7
        text: "Ensure that the `--authorization-mode` argument is not set to `AlwaysAllow` (Scored)"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--authorization-mode"
              compare:
                op: nothave
                value: "AlwaysAllow"
              set: true
        remediation: |
          Edit the API server pod specification file `$apiserverconf`
          on the master node and set the `--authorization-mode` parameter to values other than `AlwaysAllow`.
          One such example could be as below.

          ``` bash
          --authorization-mode=RBAC
          ```

        scored: true

      - id: 1.2.8
        text: "Ensure that the `--authorization-mode` argument includes `Node` (Scored)"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--authorization-mode"
              compare:
                op: has
                value: "Node"
              set: true
        remediation: |
          Edit the API server pod specification file `$apiserverconf`
          on the master node and set the `--authorization-mode` parameter to a value that includes `Node`.

          ``` bash
          --authorization-mode=Node,RBAC
          ```
        scored: true

      - id: 1.2.9
        text: "Ensure that the `--authorization-mode` argument includes `RBAC` (Scored)"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--authorization-mode"
              compare:
                op: has
                value: "RBAC"
              set: true
        remediation: |
          Edit the API server pod specification file `$apiserverconf`
          on the master node and set the `--authorization-mode` parameter to a value that includes RBAC,
          for example:

          ``` bash
          --authorization-mode=Node,RBAC
          ```

        scored: true

      - id: 1.2.10
        text: "Ensure that the admission control plugin `EventRateLimit` is set (Not Scored)"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--enable-admission-plugins"
              compare:
                op: has
                value: "EventRateLimit"
              set: true
        remediation: |
          Follow the Kubernetes documentation and set the desired limits in a configuration file.
          Then, edit the API server pod specification file `$apiserverconf`
          and set the below parameters.

          ``` bash
          --enable-admission-plugins=...,EventRateLimit,...
          --admission-control-config-file=<path/to/configuration/file>
          ```

        scored: false

      - id: 1.2.11
        text: "Ensure that the admission control plugin `AlwaysAdmit` is not set (Scored)"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          bin_op: or
          test_items:
            - flag: "--enable-admission-plugins"
              compare:
                op: nothave
                value: AlwaysAdmit
              set: true
            - flag: "--enable-admission-plugins"
              set: false
        remediation: |
          Edit the API server pod specification file `$apiserverconf`
          on the master node and either remove the `--enable-admission-plugins` parameter, or set it to a
          value that does not include `AlwaysAdmit`.
        scored: true

      - id: 1.2.12
        text: "Ensure that the admission control plugin `AlwaysPullImages` is set (Not Scored)"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--enable-admission-plugins"
              compare:
                op: has
                value: "AlwaysPullImages"
              set: true
        remediation: |
          Edit the API server pod specification file `$apiserverconf`
          on the master node and set the `--enable-admission-plugins` parameter to include
          `AlwaysPullImages`.

          ``` bash
          --enable-admission-plugins=...,AlwaysPullImages,...
          ```

        scored: false

      - id: 1.2.13
        text: "Ensure that the admission control plugin `SecurityContextDeny` is set if `PodSecurityPolicy` is not used (Not Scored)"
        audit: "/mnt/kube-bench/test_helpers/1.2.13.sh /opt/kubernetes/encryption.yaml"
        tests:
          test_items:
            - flag: "pass"
              set: true
        remediation: |
          Edit the API server pod specification file `$apiserverconf`
          on the master node and set the `--enable-admission-plugins` parameter to include
          `SecurityContextDeny`, unless `PodSecurityPolicy` is already in place.

          ``` bash
          --enable-admission-plugins=...,SecurityContextDeny,...
          ```

        scored: false

      - id: 1.2.14
        text: "Ensure that the admission control plugin `ServiceAccount` is set (Scored)"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          bin_op: or
          test_items:
            - flag: "--enable-admission-plugins"
              compare:
                op: has
                value: "ServiceAccount"
              set: true
            - flag: "--enable-admission-plugins"
              set: false
        remediation: |
          Follow the documentation and create ServiceAccount objects as per your environment.
          Then, edit the API server pod specification file `$apiserverconf`
          on the master node and ensure that the `--disable-admission-plugins` parameter is set to a
          value that does not include `ServiceAccount`.
        scored: true

      - id: 1.2.15
        text: "Ensure that the admission control plugin `NamespaceLifecycle` is set (Scored)"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          bin_op: or
          test_items:
            - flag: "--disable-admission-plugins"
              compare:
                op: nothave
                value: "NamespaceLifecycle"
              set: true
            - flag: "--disable-admission-plugins"
              set: false
        remediation: |
          Edit the API server pod specification file `$apiserverconf`
          on the master node and set the `--disable-admission-plugins` parameter to
          ensure it does not include `NamespaceLifecycle`.
        scored: true

      - id: 1.2.16
        text: "Ensure that the admission control plugin `PodSecurityPolicy` is set (Scored)"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--enable-admission-plugins"
              compare:
                op: has
                value: "PodSecurityPolicy"
              set: true
        remediation: |
          Follow the documentation and create Pod Security Policy objects as per your environment.
          Then, edit the API server pod specification file `$apiserverconf`
          on the master node and set the `--enable-admission-plugins` parameter to a
          value that includes `PodSecurityPolicy`:

          ``` bash
          --enable-admission-plugins=...,PodSecurityPolicy,...
          ```

          Then restart the API Server.
        scored: true

      - id: 1.2.17
        text: "Ensure that the admission control plugin `NodeRestriction` is set (Scored)"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--enable-admission-plugins"
              compare:
                op: has
                value: "NodeRestriction"
              set: true
        remediation: |
          Follow the Kubernetes documentation and configure `NodeRestriction` plug-in on kubelets.
          Then, edit the API server pod specification file `$apiserverconf`
          on the master node and set the `--enable-admission-plugins` parameter to a
          value that includes `NodeRestriction`.

          ``` bash
          --enable-admission-plugins=...,NodeRestriction,...
          ```
 
        scored: true

      - id: 1.2.18
        text: "Ensure that the `--insecure-bind-address` argument is not set (Scored)"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--insecure-bind-address"
              set: false
        remediation: |
          Edit the API server pod specification file `$apiserverconf`
          on the master node and remove the `--insecure-bind-address` parameter.
        scored: true

      - id: 1.2.19
        text: "Ensure that the `--insecure-port` argument is set to `0` (Scored)"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--insecure-port"
              compare:
                op: eq
                value: 0
              set: true
        remediation: |
          Edit the API server pod specification file `$apiserverconf`
          on the master node and set the below parameter.

          ``` bash
          --insecure-port=0
          ```

        scored: true

      - id: 1.2.20
        text: "Ensure that the `--secure-port` argument is not set to `0` (Scored) "
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          bin_op: or
          test_items:
            - flag: "--secure-port"
              compare:
                op: gt
                value: 0
              set: true
            - flag: "--secure-port"
              set: false
        remediation: |
          Edit the API server pod specification file `$apiserverconf`
          on the master node and either remove the `--secure-port` parameter or
          set it to a different **(non-zero)** desired port.
        scored: true

      - id: 1.2.21
        text: "Ensure that the `--profiling` argument is set to `false` (Scored)"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--profiling"
              compare:
                op: eq
                value: false
              set: true
        remediation: |
          Edit the API server pod specification file `$apiserverconf`
          on the master node and set the below parameter.
          
          ``` bash
          --profiling=false
          ```

        scored: true

      - id: 1.2.22
        text: "Ensure that the `--audit-log-path` argument is set (Scored)"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--audit-log-path"
              set: true
        remediation: |
          Edit the API server pod specification file `$apiserverconf`
          on the master node and set the `--audit-log-path` parameter to a suitable path and
          file where you would like audit logs to be written, for example:

          ``` bash
          --audit-log-path=/var/log/apiserver/audit.log
          ```

        scored: true

      - id: 1.2.23
        text: "Ensure that the `--audit-log-maxage` argument is set to `30` or as appropriate (Scored)"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--audit-log-maxage"
              compare:
                op: gte
                value: 30
              set: true
        remediation: |
          Edit the API server pod specification file `$apiserverconf`
          on the master node and set the `--audit-log-maxage` parameter to `30` or as an appropriate number of days:

          ``` bash
          --audit-log-maxage=30
          ```

        scored: true

      - id: 1.2.24
        text: "Ensure that the `--audit-log-maxbackup` argument is set to `10` or as appropriate (Scored)"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--audit-log-maxbackup"
              compare:
                op: gte
                value: 10
              set: true
        remediation: |
          Edit the API server pod specification file `$apiserverconf`
          on the master node and set the `--audit-log-maxbackup` parameter to `10` or to an appropriate
          value.
 
          ``` bash
          --audit-log-maxbackup=10
          ```

        scored: true

      - id: 1.2.25
        text: "Ensure that the `--audit-log-maxsize` argument is set to `100` or as appropriate (Scored)"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--audit-log-maxsize"
              compare:
                op: gte
                value: 100
              set: true
        remediation: |
          Edit the API server pod specification file `$apiserverconf`
          on the master node and set the `--audit-log-maxsize` parameter to an appropriate size in **MB**.
          For example, to set it as `100` **MB**:

          ``` bash
          --audit-log-maxsize=100
          ```

        scored: true

      - id: 1.2.26
        text: "Ensure that the `--request-timeout` argument is set as appropriate (Scored)"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          bin_op: or
          test_items:
            - flag: "--request-timeout"
              set: false
            - flag: "--request-timeout"
              set: true
        remediation: |
          Edit the API server pod specification file `$apiserverconf`
          and set the below parameter as appropriate and if needed.
          For example,

          ``` bash
          --request-timeout=300s
          ```

        scored: true

      - id: 1.2.27
        text: "Ensure that the `--service-account-lookup` argument is set to `true` (Scored)"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          bin_op: or
          test_items:
            - flag: "--service-account-lookup"
              set: false
            - flag: "--service-account-lookup"
              compare:
                op: eq
                value: true
              set: true
        remediation: |
          Edit the API server pod specification file `$apiserverconf`
          on the master node and set the below parameter.

          ``` bash
          --service-account-lookup=true
          ```

          Alternatively, you can delete the `--service-account-lookup` parameter from this file so
          that the default takes effect.
        scored: true

      - id: 1.2.28
        text: "Ensure that the `--service-account-key-file` argument is set as appropriate (Scored)"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--service-account-key-file"
              set: true
        remediation: |
          Edit the API server pod specification file `$apiserverconf`
          on the master node and set the `--service-account-key-file` parameter
          to the public key file for service accounts:

          ``` bash
          --service-account-key-file=<filename>
          ```

        scored: true

      - id: 1.2.29
        text: "Ensure that the `--etcd-certfile` and `--etcd-keyfile` arguments are set as appropriate (Scored) "
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          bin_op: and
          test_items:
            - flag: "--etcd-certfile"
              set: true
            - flag: "--etcd-keyfile"
              set: true
        remediation: |
          Follow the Kubernetes documentation and set up the TLS connection between the apiserver and etcd.
          Then, edit the API server pod specification file `$apiserverconf`
          on the master node and set the **etcd** certificate and **key** file parameters.

          ``` bash
          --etcd-certfile=<path/to/client-certificate-file>
          --etcd-keyfile=<path/to/client-key-file>
          ```

        scored: true

      - id: 1.2.30
        text: "Ensure that the `--tls-cert-file` and `--tls-private-key-file` arguments are set as appropriate (Scored)"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          bin_op: and
          test_items:
            - flag: "--tls-cert-file"
              set: true
            - flag: "--tls-private-key-file"
              set: true
        remediation: |
          Follow the Kubernetes documentation and set up the TLS connection on the apiserver.
          Then, edit the API server pod specification file `$apiserverconf`
          on the master node and set the TLS certificate and private key file parameters.

          ``` bash
          --tls-cert-file=<path/to/tls-certificate-file>
          --tls-private-key-file=<path/to/tls-key-file>
          ```

        scored: true

      - id: 1.2.31
        text: "Ensure that the `--client-ca-file` argument is set as appropriate (Scored)"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--client-ca-file"
              set: true
        remediation: |
          Follow the Kubernetes documentation and set up the TLS connection on the apiserver.
          Then, edit the API server pod specification file `$apiserverconf`
          on the master node and set the client certificate authority file.

          ``` bash
          --client-ca-file=<path/to/client-ca-file>
          ```

        scored: true

      - id: 1.2.32
        text: "Ensure that the `--etcd-cafile` argument is set as appropriate (Scored)"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--etcd-cafile"
              set: true
        remediation: |
          Follow the Kubernetes documentation and set up the TLS connection between the apiserver and etcd.
          Then, edit the API server pod specification file `$apiserverconf`
          on the master node and set the etcd certificate authority file parameter.

          ``` bash
          --etcd-cafile=<path/to/ca-file>
          ```

        scored: true

      - id: 1.2.33
        text: "Ensure that the `--encryption-provider-config` argument is set as appropriate (Scored)"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--encryption-provider-config"
              set: true
        remediation: |
          Follow the Kubernetes documentation and configure a EncryptionConfig file.
          Then, edit the API server pod specification file `$apiserverconf`
          on the master node and set the `--encryption-provider-config` parameter to the path of that file:

          ``` bash
          --encryption-provider-config=</path/to/EncryptionConfig/File>
          ```

        scored: true

      - id: 1.2.34
        text: "Ensure that encryption providers are appropriately configured (Scored)"
        audit: "/mnt/kube-bench/test_helpers/1.2.34.sh /etc/kubernetes/ssl/encryption.yaml"
        tests:
          test_items:
            - flag: "--pass"
              set: true
        remediation: |
          Follow the Kubernetes documentation and configure a `EncryptionConfig` file.
          In this file, choose **aescbc**, **kms** or **secretbox** as the encryption provider.
        scored: true

      - id: 1.2.35
        text: "Ensure that the API Server only makes use of Strong Cryptographic Ciphers (Not Scored)"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--tls-cipher-suites"
              compare:
                op: has
                value: "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256"
              set: true
        remediation: |
          Edit the API server pod specification file `$apiserverconf`
          on the master node and set the below parameter.

          ``` bash
          --tls-cipher-suites=TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
          ```

        scored: false

  - id: 1.3
    text: "Controller Manager"
    checks:
      - id: 1.3.1
        text: "Ensure that the `--terminated-pod-gc-threshold` argument is set as appropriate (Scored)"
        audit: "/bin/ps -ef | grep $controllermanagerbin | grep -v grep"
        tests:
          test_items:
            - flag: "--terminated-pod-gc-threshold"
              set: true
        remediation: |
          Edit the Controller Manager pod specification file `$controllermanagerconf`
          on the master node and set the `--terminated-pod-gc-threshold` to an appropriate threshold,
          for example:

          ``` bash
          --terminated-pod-gc-threshold=10
          ```
        scored: true

      - id: 1.3.2
        text: "Ensure that the `--profiling` argument is set to false (Scored)"
        audit: "/bin/ps -ef | grep $controllermanagerbin | grep -v grep"
        tests:
          test_items:
            - flag: "--profiling"
              compare:
                op: eq
                value: false
              set: true
        remediation: |
          Edit the Controller Manager pod specification file `$controllermanagerconf`
          on the master node and set the below parameter.

          ``` bash
          --profiling=false
          ```

        scored: true

      - id: 1.3.3
        text: "Ensure that the `--use-service-account-credentials` argument is set to `true` (Scored)"
        audit: "/bin/ps -ef | grep $controllermanagerbin | grep -v grep"
        tests:
          test_items:
            - flag: "--use-service-account-credentials"
              compare:
                op: noteq
                value: false
              set: true
        remediation: |
          Edit the Controller Manager pod specification file `$controllermanagerconf`
          on the master node to set the below parameter.

          ``` bash
          --use-service-account-credentials=true
          ```

        scored: true

      - id: 1.3.4
        text: "Ensure that the `--service-account-private-key-file` argument is set as appropriate (Scored)"
        audit: "/bin/ps -ef | grep $controllermanagerbin | grep -v grep"
        tests:
          test_items:
            - flag: "--service-account-private-key-file"
              set: true
        remediation: |
          Edit the Controller Manager pod specification file `$controllermanagerconf`
          on the master node and set the `--service-account-private-key-file` parameter
          to the private key file for service accounts.

          ``` bash
          --service-account-private-key-file=<filename>
          ```

        scored: true

      - id: 1.3.5
        text: "Ensure that the `--root-ca-file` argument is set as appropriate (Scored)"
        audit: "/bin/ps -ef | grep $controllermanagerbin | grep -v grep"
        tests:
          test_items:
            - flag: "--root-ca-file"
              set: true
        remediation: |
          Edit the Controller Manager pod specification file `$controllermanagerconf`
          on the master node and set the `--root-ca-file` parameter to the certificate bundle file`.

          ``` bash
          --root-ca-file=<path/to/file>
          ```
 
        scored: true

      - id: 1.3.6
        text: "Ensure that the `RotateKubeletServerCertificate` argument is set to `true` (Scored)"
        audit: "/bin/ps -ef | grep $controllermanagerbin | grep -v grep"
        tests:
          test_items:
            - flag: "--feature-gates"
              compare:
                op: eq
                value: "RotateKubeletServerCertificate=true"
              set: true
        remediation: |
          Edit the Controller Manager pod specification file `$controllermanagerconf`
          on the master node and set the `--feature-gates` parameter to include `RotateKubeletServerCertificate=true`.

          ``` bash
          --feature-gates=RotateKubeletServerCertificate=true
          ```

        scored: true

      - id: 1.3.7
        text: "Ensure that the `--bind-address argument` is set to `127.0.0.1` (Scored)"
        audit: "/bin/ps -ef | grep $controllermanagerbin | grep -v grep"
        tests:
          bin_op: or
          test_items:
            - flag: "--bind-address"
              compare:
                op: eq
                value: "127.0.0.1"
              set: true
            - flag: "--bind-address"
              set: false
        remediation: |
          Edit the Controller Manager pod specification file `$controllermanagerconf`
          on the master node and ensure the correct value for the `--bind-address` parameter.
        scored: true

  - id: 1.4
    text: "Scheduler"
    checks:
      - id: 1.4.1
        text: "Ensure that the `--profiling` argument is set to `false` (Scored)"
        audit: "/bin/ps -ef | grep $schedulerbin | grep -v grep"
        tests:
          test_items:
            - flag: "--profiling"
              compare:
                op: eq
                value: false
              set: true
        remediation: |
          Edit the Scheduler pod specification file `$schedulerconf` file
          on the master node and set the below parameter.

          ``` bash
          --profiling=false
          ```

        scored: true

      - id: 1.4.2
        text: "Ensure that the `--bind-address` argument is set to `127.0.0.1` (Scored) "
        audit: "/bin/ps -ef | grep $schedulerbin | grep -v grep"
        tests:
          bin_op: or
          test_items:
            - flag: "--bind-address"
              compare:
                op: eq
                value: "127.0.0.1"
              set: true
            - flag: "--bind-address"
              set: false
        remediation: |
          Edit the Scheduler pod specification file `$schedulerconf`
          on the master node and ensure the correct value for the `--bind-address` parameter.
        scored: true
